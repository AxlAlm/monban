// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys_schema.api_keys(api_key_id, api_key_value, created_at) 
VALUES ($1, $2, $3)
RETURNING api_key_id
`

type CreateAPIKeyParams struct {
	ApiKeyID    int32
	ApiKeyValue string
	CreatedAt   pgtype.Timestamptz
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (int32, error) {
	row := q.db.QueryRow(ctx, createAPIKey, arg.ApiKeyID, arg.ApiKeyValue, arg.CreatedAt)
	var api_key_id int32
	err := row.Scan(&api_key_id)
	return api_key_id, err
}

const getAPIKeys = `-- name: GetAPIKeys :many
SELECT api_key_id, api_key_value, created_at FROM api_keys_schema.api_keys
`

func (q *Queries) GetAPIKeys(ctx context.Context) ([]ApiKeysSchemaApiKey, error) {
	rows, err := q.db.Query(ctx, getAPIKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKeysSchemaApiKey
	for rows.Next() {
		var i ApiKeysSchemaApiKey
		if err := rows.Scan(&i.ApiKeyID, &i.ApiKeyValue, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
